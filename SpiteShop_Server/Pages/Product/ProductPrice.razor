@page "/product/price/{id:int}"
@inject IProductPriceRepository _productPriceRepository
@inject IProductRepository _productRepository


<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>
@if (IsLoading)
{
    <div class="text-center">
        <img src="/images/loading.gif">
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class=" col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span>Category : @Product.Category.Name</span> <br>
                Description :<span> @((MarkupString)Product.Description)</span>
            </div>
        </div>
        <div class="col-1">
            <img src="@Product.ImageUrl" class="w-100">
        </div>
    </div>

    <SfGrid @ref="productPriceGrid" DataSource="@ProductPrices" AllowPaging="true" AllowFiltering="true" AllowSorting="true"
    Toolbar = "@(new List<string>{"Add","Edit","Update","Delete","Cancel"})">
       
        <GridEditSettings AllowAdding="true" AllowEditing="true" ShowDeleteConfirmDialog="true" AllowDeleting="true"></GridEditSettings>
        <GridEvents OnActionBegin="ActionHandler" TValue="ProductPriceDTO"></GridEvents>

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>

        <GridSortSettings AllowUnsort="false">
            <GridSortColumns>
                <GridSortColumn Field="Price" Direction="SortDirection.Ascending"></GridSortColumn>  @*Preise der Spalte ist immer sortiert*@
            </GridSortColumns>
        </GridSortSettings>

        <GridPageSettings PageSize="5" PageCount="5" PageSizes="true"></GridPageSettings>

        <GridColumns>
            <GridColumn Field=@nameof(ProductPriceDTO.ID) HeaderText="ID" IsPrimaryKey="true" AllowAdding="false"></GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Size) HeaderText="Size" Width="150">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList DataSource="SizeList" Width="150" TValue="string" TItem="string" @bind-value="((context as ProductPriceDTO).Size)"></Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Price) HeaderText="Price" Format="C2"  ></GridColumn>

                <GridColumn HeaderText="Manage Records" Width="150">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
         </GridColumn>

        </GridColumns>
    </SfGrid>
}
@code {
    [Parameter]
    public int Id { get; set; } // fängt die jeweilige id auf die ausgewählt worden ist.
    private ProductDTO Product { get; set; } = new(); //zeigt das jeweilige Produkt an
    private IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>(); // gibt die verschiedenen Preise an in Abhängigkeit von ihrer Size
    public SfGrid<ProductPriceDTO> productPriceGrid;
    private bool IsLoading { get; set; } = true;

    IEnumerable<String> SizeList = new List<String>()
    {
        "Small","Medium","Large","8oz","16oz","24oz"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductPrices = await _productPriceRepository.GetAll(Id);
            IsLoading = false;
            StateHasChanged();
        }
    }

    public async void ActionHandler(ActionEventArgs<ProductPriceDTO> args)
    {
        if(args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            args.Data.ProductID=Id;
            if (args.Action == "Add")
            {
                await _productPriceRepository.Create(args.Data);
                ProductPrices = await _productPriceRepository.GetAll(Id);
                productPriceGrid.Refresh(); 
            }
            if (args.Action == "Edit")
            {
                await _productPriceRepository.Update(args.Data);
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _productPriceRepository.Delete(Id);
            productPriceGrid.Refresh(); 
        }
    }

}
